diff --git a/.github/workflows/build.yml b/.github/workflows/build.yml
index 00c3bce4..526263cb 100644
--- a/.github/workflows/build.yml
+++ b/.github/workflows/build.yml
@@ -2,7 +2,7 @@ name: Build YouTube Music
 
 on:
   push:
-    branches: [ master ]
+    branches: [ music-query-widget ]
   pull_request:
 
 env:
@@ -44,20 +44,20 @@ jobs:
 
       # Only vite build without release if it is a fork, or it is a pull-request
       - name: Vite Build
-        if: github.repository == 'th-ch/youtube-music' && github.event_name == 'pull_request'
+        if: github.repository == 'iryis/th-ch-ytmusic' && github.event_name == 'pull_request'
         run: |
           pnpm build
 
       # Build and release if it's the main repository and is not pull-request
       - name: Build and release on Mac
-        if: startsWith(matrix.os, 'macOS') && (github.repository == 'th-ch/youtube-music' && github.event_name != 'pull_request')
+        if: startsWith(matrix.os, 'macOS') && (github.repository == 'iryis/th-ch-ytmusic' && github.event_name != 'pull_request')
         env:
           GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
         run: |
           pnpm release:mac
 
       - name: Build and release on Linux
-        if: startsWith(matrix.os, 'ubuntu') && (github.repository == 'th-ch/youtube-music' && github.event_name != 'pull_request')
+        if: startsWith(matrix.os, 'ubuntu') && (github.repository == 'iryis/th-ch-ytmusic' && github.event_name != 'pull_request')
         env:
           GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
         run: |
@@ -65,7 +65,7 @@ jobs:
           pnpm release:linux
 
       - name: Build and release on Windows
-        if: startsWith(matrix.os, 'windows') && (github.repository == 'th-ch/youtube-music' && github.event_name != 'pull_request')
+        if: startsWith(matrix.os, 'windows') && (github.repository == 'iryis/th-ch-ytmusic' && github.event_name != 'pull_request')
         env:
           GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
         run: |
@@ -82,7 +82,7 @@ jobs:
   release:
     runs-on: ubuntu-latest
     name: Release YouTube Music
-    if: github.repository == 'th-ch/youtube-music' && github.ref == 'refs/heads/master'
+    if: github.repository == 'iryis/th-ch-ytmusic' && github.ref == 'refs/heads/music-query-widget'
     needs: build
     steps:
       - uses: actions/checkout@v4
@@ -140,25 +140,17 @@ jobs:
           draft: false
           prerelease: false
           replacename: true
-          name: ${{ env.VERSION_TAG }}
+          name: ${{ env.VERSION_TAG }}+mw
           replacebody: true
           body: |
             See [changelog](https://github.com/th-ch/youtube-music/blob/master/changelog.md#${{ env.CHANGELOG_ANCHOR }}) for the list of updates and the full diff.
 
-            Thanks to all contributors! 🏅
+            Includes `music-query-widget` plugin. (supports e.g. amuse, ytmdv1)
 
             (Note for Windows: `YouTube-Music-Web-Setup-${{ env.VERSION_TAG }}.exe` is an installer, and `YouTube-Music-${{ env.VERSION_TAG }}.exe` is a portable version)
 
-      - name: Update changelog
-        if: ${{ env.VERSION_HASH == '' }}
-        run: |
-          pnpm changelog
-
-      - name: Commit changelog
-        if: ${{ env.VERSION_HASH == '' }}
-        uses: stefanzweifel/git-auto-commit-action@v5
-        with:
-          commit_message: Update changelog for ${{ env.VERSION_TAG }}
-          file_pattern: "changelog.md"
-          commit_user_name: CI
-          commit_user_email: th-ch@users.noreply.github.com
+            ## Amuse Tutorial
+            - Download below the release according to your platform (you may have to press Show more releases)
+             - On MacOS You may find it easier to use the other dmg file if you get a "damaged" popup (We love Apple)
+             - Open it up and find Plugins in the top left to enable **Music Widget API**
+             - Continue with regular Amuse OBS setup
diff --git a/src/plugins/music-widget-api/backend.ts b/src/plugins/music-widget-api/backend.ts
new file mode 100644
index 00000000..20579720
--- /dev/null
+++ b/src/plugins/music-widget-api/backend.ts
@@ -0,0 +1,154 @@
+import http from 'node:http';
+
+import { ipcMain } from 'electron';
+import is from "electron-is";
+import { createBackend } from '@/utils';
+
+import registerCallback from '../../providers/song-info';
+import { isEnabled } from '../../config/plugins';
+
+const port = 9863; // Choose a port number
+
+export interface PlayerInfo {
+  hasSong: boolean;
+  isPaused: boolean;
+  volumePercent: number;
+  seekbarCurrentPosition: number;
+  seekbarCurrentPositionHuman: string;
+  statePercent: number;
+  likeStatus: string;
+  repeatType: string;
+}
+
+export interface TrackInfo {
+  author: string;
+  title: string;
+  album: string;
+  cover: string;
+  duration: number;
+  durationHuman: string;
+  url: string;
+  id: string;
+  isVideo: boolean;
+  isAdvertisement: boolean;
+  inLibrary: boolean;
+}
+
+export interface YTMDSongInfo {
+  player: PlayerInfo;
+  track: TrackInfo;
+}
+
+let songInfo: (YTMDSongInfo & { loopStatus?: string, volume?: number });
+
+export default createBackend({
+  start({ipc: { send } }) {
+    songInfo = {
+      player: {
+        hasSong: false,
+        isPaused: false,
+        volumePercent: 100,
+        seekbarCurrentPosition: 0,
+        seekbarCurrentPositionHuman: '0:00',
+        statePercent: 0,
+        likeStatus: "INDIFFERENT",
+        repeatType: "NONE",
+      },
+      track: {
+        duration: 0,
+        durationHuman: "0:00",
+        title: "",
+        author: "",
+        album: "",
+        cover: "",
+        url: "",
+        id: "",
+        isVideo: false,
+        isAdvertisement: false,
+        inLibrary: false,
+      }
+    };
+
+    if (!is.linux() || (is.linux() && !isEnabled('shortcuts'))) {
+      ipcMain.on('ytmd:player-api-loaded', () => {
+        send('ytmd:setup-seeked-listener', 'music-widget-api');
+        send('ytmd:setup-time-changed-listener', 'music-widget-api');
+        send('ytmd:setup-repeat-changed-listener', 'music-widget-api');
+        send('ytmd:setup-volume-changed-listener', 'music-widget-api');
+      });
+    }
+
+    // updations
+    ipcMain.on('ytmd:seeked', (_: any, t: number) => {
+      if (songInfo) {
+        songInfo.player.seekbarCurrentPosition = t;
+        songInfo.player.statePercent = t / songInfo.track.duration;
+      }
+    });
+
+    ipcMain.on('ytmd:time-changed', (_: any, t: number) => {
+      if (songInfo) {
+        songInfo.player.seekbarCurrentPosition = t;
+        songInfo.player.statePercent = t / songInfo.track.duration;
+      }
+    });
+
+    ipcMain.on('ytmd:repeat-changed', (_: any, mode: string) => {
+      if (songInfo) {
+        songInfo.loopStatus = mode;
+      }
+    });
+
+    ipcMain.on('ytmd:volume-changed', (_: any, newVolume: number) => {
+      if (songInfo) {
+        songInfo.volume = newVolume;
+      }
+    });
+
+    registerCallback((info) => {
+      // Nothing here is even used except things like hasSong, isPaused, and track metadata related
+      songInfo = {
+        player: {
+          hasSong: info.artist && info.title ? true : false,
+          isPaused: info.isPaused ?? false,
+          volumePercent: songInfo?.volume ?? 100,
+          seekbarCurrentPosition: songInfo.player.seekbarCurrentPosition,
+          seekbarCurrentPositionHuman: songInfo?.player.seekbarCurrentPositionHuman ?? '00:00',
+          statePercent: songInfo?.player.statePercent ?? 0,
+          likeStatus: "INDIFFERENT",
+          repeatType: "NONE",
+        },
+        track: {
+          duration: info.songDuration,
+          durationHuman: "", // doesnt matter, calculated using duration anyways
+          title: info.title,
+          author: info.artist,
+          album: info.album ?? "",
+          cover: info.imageSrc ?? "",
+          url: info.url ?? "",
+          id: new URL(info.url ?? "").searchParams.get("v") ?? "",
+          isVideo: info.videoId !== undefined,
+          isAdvertisement: false,
+          inLibrary: false,
+        }
+      }
+      return songInfo;
+    });
+
+    const server = http.createServer((req: http.IncomingMessage, res: http.ServerResponse) => {
+      // necessary because of CORS
+      res.setHeader('Access-Control-Allow-Origin', '*')
+      res.setHeader('Content-Type', 'application/json');
+      if (req.url === '/') {
+        res.writeHead(200)
+        res.end("Music Widget API is running.")
+      }
+      if (req.url === '/query' || req.url === '/api') {
+        res.end(JSON.stringify(songInfo));
+      }
+    });
+    server.listen(port, () => {
+      console.log(`Music widget api started at http://localhost:${port}`);
+    });
+  }
+});
diff --git a/src/plugins/music-widget-api/index.ts b/src/plugins/music-widget-api/index.ts
new file mode 100644
index 00000000..ceae03c5
--- /dev/null
+++ b/src/plugins/music-widget-api/index.ts
@@ -0,0 +1,19 @@
+import { createPlugin } from '@/utils';
+import backend from './backend';
+
+export interface MusicWidgetConfig {
+  enabled: boolean,
+}
+
+export const defaultConfig: MusicWidgetConfig = {
+  enabled: false,
+};
+
+
+export default createPlugin({
+  name: () => 'Music Widget API',
+  description: () => 'Simple API to query YTMusic data. Support for anything that querying ytmdesktop v1',
+  restartNeeded: true, // if value is true, ytmusic show restart dialog
+  config: defaultConfig,
+  backend,
+});
